@page "/components"
@using AWUI.Components
@using System.IO.Compression
@using System.Text

<Label Text="这是一个标签"></Label>

<Input TValue="bool" 
Type="InputType.Checkbox"
Value="_inputValue"
ValueChanged="CheckBoxChanged" />

<Divider />

@_inputValue

<Button OnClick="AlertDialog">弹出警告框</Button>

<Alert Type="ColorType.Blue" IsVisible="_alertVisible" OnClose="AlertClose">Hello</Alert>

<SelectTree TreeNode="_treeNode" OnNodeSelected="NodeSelected"></SelectTree>

<Divider />

@_selectedTreeNode?.Text

@code{
    private bool _inputValue = false;

    private bool _alertVisible = false;

    private TreeNode _treeNode;

    private TreeNode _selectedTreeNode;

    protected override void OnInitialized()
    {
        _treeNode = new TreeNode("展开项标题")
        {
            Children = new List<TreeNode>
            {
                new TreeNode("子项1")
                {
                    Children = new List<TreeNode>
                    {
                        new TreeNode("子项1-1"),
                        new TreeNode("子项1-2")
                    }
                },
                new TreeNode("子项2")
                {
                    Children = new List<TreeNode>
                    {
                        new TreeNode("子项2-1"),
                        new TreeNode("子项2-2")
                    }
                }
            }
        };
    } 

    private void NodeSelected(TreeNode node)
    {
        _selectedTreeNode = node;
        StateHasChanged();
    }

    private async Task CheckBoxChanged(bool arg)
    {
        _inputValue = !_inputValue;
        StateHasChanged();
    }

    private Task AlertDialog(MouseEventArgs args)
    {
        _alertVisible = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task AlertClose()
    {
        Task.Delay(3000);
        _alertVisible = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
